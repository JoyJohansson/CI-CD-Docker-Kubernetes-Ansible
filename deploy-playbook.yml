- name: Rolling update and rollback for Nginx deployment
  hosts: localhost
  connection: local
  gather_facts: no

  vars:
    ghcr_username: "{{ lookup('env', 'GHCR_USERNAME') }}"
    ghcr_token: "{{ lookup('env', 'GHCR_PAT') }}"
    repository_name: "ghcr.io/joyjohansson/ci-cd-docker-kubernetes-ansible/my-nginx"
    app_port: "80"
    kubeconfig_path: "/home/joy-johansson/.kube/config"

  tasks:
    - name: Fetch the current deployed image
      command: kubectl get deployment nginx-deployment -o=jsonpath='{.spec.template.spec.containers[0].image}'
      register: previous_image
      environment:
        KUBECONFIG: "{{ kubeconfig_path }}"

    - name: Fetch the latest image tag from GHCR
      shell: >
        TOKEN=$(curl -s -u "{{ ghcr_username }}:{{ ghcr_token }}"
        "https://ghcr.io/token?scope=repository:joyjohansson/ci-cd-docker-kubernetes-ansible/my-nginx:pull" | jq -r .token) &&
        curl -s -H "Authorization: Bearer $TOKEN"
        "https://ghcr.io/v2/joyjohansson/ci-cd-docker-kubernetes-ansible/my-nginx/tags/list" |
        jq -r '.tags | map(select(test("^v[0-9]+\\.[0-9]+\\.[0-9]+$"))) | sort | last'
      register: latest_tag

    - name: Debug the latest tag
      debug:
        msg: "Latest image tag is {{ latest_tag.stdout }}"

    - name: Update Nginx Deployment with Latest Image
      command: kubectl set image deployment/nginx-deployment nginx={{ repository_name }}:{{ latest_tag.stdout }}
      environment:
        KUBECONFIG: "{{ kubeconfig_path }}"

    - name: Wait for rollout to complete
      command: kubectl rollout status deployment/nginx-deployment --timeout=60s
      environment:
        KUBECONFIG: "{{ kubeconfig_path }}"
      register: rollout_status
      ignore_errors: yes

    - name: Rollback if deployment failed
      command: kubectl rollout undo deployment/nginx-deployment
      environment:
        KUBECONFIG: "{{ kubeconfig_path }}"
      when: rollout_status.rc != 0

    - name: Debug Rollback Status
      debug:
        msg: "Deployment rolled back due to failure"
      when: rollout_status.rc != 0

    - name: Verify Running Image Version
      command: kubectl get deployment nginx-deployment -o=jsonpath='{.spec.template.spec.containers[0].image}'
      register: new_image
      environment:
        KUBECONFIG: "{{ kubeconfig_path }}"

    - name: Debug New Image
      debug:
        msg: "Deployment is now running image {{ new_image.stdout }}"

